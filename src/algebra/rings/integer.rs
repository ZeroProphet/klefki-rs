use std::ops::{Add, Div, Mul, Sub};
use std::convert::TryFrom;

/// U256 on littleEdian
/// ref: https://arxiv.org/ftp/arxiv/papers/1204/1204.0232.pdf
pub struct U256([u64;6]);

impl Add for U256 {
    type Output = Self;
    fn add(self, rhs: Self) -> Self {
        let mut carry: u128 = 0;
        let mut sum: u128;
        let mut out = [0u64;6];

        for i in 0 .. 6 {
            sum = u128::from(self.0[i]) + u128::from(rhs.0[i]) + carry;
            carry = sum >> 64;
            out[i] = u64::try_from(sum & u128::from(u64::MAX)).unwrap();
        }
        return Self(out);
    }
}

impl Sub for U256 {
    type Output = Self;
    fn sub(self, rhs: Self) -> Self {
        let mut borrow = 0;
        let mut out = [0u64;6];
        let mut delta: i128;

        for i in 0 .. 6 {
            delta = i128::from(self.0[i]) - i128::from(rhs.0[i]) - borrow;
            borrow = (delta < 0) as i128;
            out[i] = u64::try_from(delta & i128::from(u64::MAX)).unwrap();
        }
        return Self(out)
    }
}


#[cfg(test)]
mod tests {
    use super::U256;
    #[test]
    fn test_add() {
        let a = U256(
            [1229802880658540697,
             18446743716600914193,
             18442540718065975295,
             11029315487430344703,
             18446744018751940488,
             15]
        );
        let b = U256(
            [2459603411396185600,
             2305842294996419106,
             15752379989347008497,
             11029315487430344620,
             18446744018751940488,
             271]
        );
        let sum = a + b;
        assert_eq!(
            sum.0,
            [3689406292054726297,
             2305841937887781683,
             15748176633703432177,
             3611886901151137708,
             18446743963794329361,
             287]
        );

        let x = U256(
            [1229800530737644903,
             2305842652105056529,
             15756583344990584817,
             18446744073709551532,
             18446744073709551615,
             255]
        );
        let y = U256(
            [1229802880658540697,
             18446743716600914193,
             18442540718065975295,
             11029315485998710783,
             18446744018751940488,
             15]
        );
        let sum2 = x + y;
        assert_eq!(
            sum2.0,
            [2459603411396185600,
             2305842294996419106,
             15752379989347008497,
             11029315485998710700,
             18446744018751940488,
             271]
        )
    }


    #[test]
    fn test_sub() {
        let a = U256(
            [1229802880658540697,
             18446743716600914193,
             18442540718065975295,
             11029315487430344703,
             18446744018751940488,
             15]
        );
        let b = U256(
            [2459603411396185600,
             2305842294996419106,
             15752379989347008497,
             11029315487430344620,
             18446744018751940488,
             271]
        );
        let delta = b - a;
        assert_eq!(
            delta.0,
            [1229800530737644903,
             2305842652105056529,
             15756583344990584817,
             18446744073709551532,
             18446744073709551615,
             255]
        );
        let x = U256(
            [1229800530737644903,
             2305842652105056529,
             15756583344990584817,
             18446744073709551532,
             18446744073709551615,
             255]
        );
        let y = U256(
            [1229802880658540697,
             18446743716600914193,
             18442540718065975295,
             11029315485998710783,
             18446744018751940488,
             15]
        );
        let delta2 = x - y;
        assert_eq!(delta2.0,
                  [18446741723788655822,
                   2305843009213693951,
                   15760786700634161137,
                   7417428587710840748,
                   54957611127,
                   240]
        );
    }

}
